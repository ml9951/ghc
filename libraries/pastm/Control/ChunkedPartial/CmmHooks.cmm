#include "Cmm.h"

/* -----------------------------------------------------------------------------
 * Partial Abort TVar primitives
 * -------------------------------------------------------------------------- */

// This must match StgAtomicallyFrame in Closures.h
#define ATOMICALLY_FRAME_FIELDS(w_,p_,info_ptr,p1,p2,code,next,result)  \
    w_ info_ptr,                                                        \
    PROF_HDR_FIELDS(w_,p1,p2)                                           \
    p_ code,                                                            \
    p_ next,                                                            \
    p_ result


INFO_TABLE_RET(stg_ptl2_atomically_frame, ATOMICALLY_FRAME,
               // layout of the frame, and bind the field names
               ATOMICALLY_FRAME_FIELDS(W_,P_,
                                       info_ptr, p1, p2,
                                       code,
                                       next_invariant,
                                       frame_result))
    return (P_ result) // value returned to the frame
{
    P_ checkpoint;
    gcptr trec, outer, next_invariant, q;

    trec = StgTSO_ptrec(CurrentTSO);

    /* We've got no more invariants to check, try to commit */
    ("ptr" checkpoint) = ccall ptl2_stmCommitTransaction(MyCapability() "ptr", trec "ptr", StgTSO_id(CurrentTSO));

    if(checkpoint == PASTM_SUCCESS){ //Validation succeeded
        frame_result = result;
        return(frame_result);
    }
    if(checkpoint == PASTM_FAIL){ //Validation failed and no checkpoint
		
        jump stg_ap_v_fast
            // push the StgAtomicallyFrame again: the code generator is
            // clever enough to only assign the fields that have changed.
            (ATOMICALLY_FRAME_FIELDS(,,info_ptr,p1,p2,
                                     code,next_invariant,frame_result))
            (code);
    }else{//Validation failed, but we have a checkpoint

        P_ k;
        P_ val;

        k = StgPTRecChunk_checkpoint(checkpoint);
        val = StgPTRecHeader_capture_freq(checkpoint);
	
        jump stg_ap_pv_fast  
            // push the StgAtomicallyFrame again: the code generator is
            // clever enough to only assign the fields that have changed.
            (ATOMICALLY_FRAME_FIELDS(,,info_ptr,p1,p2,
                                     code,next_invariant,frame_result))
            (k, val);
    }
}

stg_ptl2_atomicallyzh (P_ stm)
{
    P_ old_trec;
    P_ new_trec;
    P_ code, next_invariant, frame_result;

    // stmStartTransaction may allocate
    MAYBE_GC_P(stg_ptl2_atomicallyzh, stm);

    STK_CHK_GEN();

    old_trec = StgTSO_ptrec(CurrentTSO);

    /* Start the memory transcation */
    ("ptr" new_trec) = ccall ptl2_stmStartTransaction(MyCapability() "ptr", old_trec "ptr");
    StgTSO_ptrec(CurrentTSO) = new_trec;

    code = stm;
    next_invariant = END_INVARIANT_CHECK_QUEUE;
    frame_result = NO_TREC;

    jump stg_ap_v_fast
        (ATOMICALLY_FRAME_FIELDS(,,stg_ptl2_atomically_frame_info, CCCS, 0,
                                 code,next_invariant,frame_result))
        (stm);
}

stg_ptl2_eagerFullAbort
{
    W_ frame;
    P_ code; 
    SAVE_THREAD_STATE();
    ccall p_setAtomicallyFrameHelper(MyCapability() "ptr", CurrentTSO "ptr"); 
    LOAD_THREAD_STATE();
    frame = Sp;
    R1 = StgAtomicallyFrame_code(frame);
    jump stg_ap_v_fast [R1];

}

stg_ptl2_eagerPartialAbort(P_ k, P_ val)
{
    SAVE_THREAD_STATE(); //see stg_eagerFullAbort for details
    ccall p_setAtomicallyFrameHelper(MyCapability() "ptr", CurrentTSO "ptr");
    LOAD_THREAD_STATE();
    jump stg_ap_pv_fast(k, val);

}

stg_ptl2_readTVarzh (P_ tvar, P_ k)
{
    P_ trec;
    P_ result, val, k;
    W_ header;
    
    // Call to stmReadTVar may allocate
    MAYBE_GC_PP (stg_ptl2_readTVarzh, tvar, k);

    trec = StgTSO_ptrec(CurrentTSO);
    ("ptr" result) = ccall ptl2_stmReadTVar(MyCapability() "ptr", trec "ptr",
					  tvar "ptr", k "ptr");

    if(result == PASTM_FAIL){
        jump stg_ptl2_eagerFullAbort []; //full abort
    }
    
    header = StgHeader_info(result);

    if(header == stg_PTREC_CHUNK_info){
	val = StgPTRecHeader_capture_freq(trec);
	k = StgPTRecChunk_checkpoint(result);
        jump stg_ptl2_eagerPartialAbort(k, val);
    }

    return (result);
}

stg_ptl2_writeTVarzh (P_ tvar,     /* :: TVar a */
			 P_ new_value /* :: a      */)
{
    W_ trec;

    // Call to stmWriteTVar may allocate
    MAYBE_GC_PP (stg_ptl2_writeTVarzh, tvar, new_value);

    trec = StgTSO_ptrec(CurrentTSO);
    ccall ptl2_stmWriteTVar(MyCapability() "ptr", trec "ptr", tvar "ptr",
						  new_value "ptr");
    return (tvar);
}



stg_ptl2_newTVar (P_ init)
{
    W_ tv;

    ALLOC_PRIM_P (SIZEOF_StgTL2TVar, stg_tl2_newTVarIOzh, init);

    tv = Hp - SIZEOF_StgTL2TVar + WDS(1);
    SET_HDR (tv, stg_TL2_TVAR_DIRTY_info, CCCS);
    
    StgTL2TVar_current_value(tv) = init;
    StgTL2TVar_currentStamp(tv) = 0;
    StgTL2TVar_oldStamp(tv) = 0;

    return (tv);
}
