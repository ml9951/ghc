#include "Cmm.h"

// This must match StgAtomicallyFrame in Closures.h
#define ATOMICALLY_FRAME_FIELDS(w_,p_,info_ptr,p1,p2,code,next,result)  \
    w_ info_ptr,                                                        \
    PROF_HDR_FIELDS(w_,p1,p2)                                           \
    p_ code,                                                            \
    p_ next,                                                            \
    p_ result


INFO_TABLE_RET(stg_full_atomically_frame, ATOMICALLY_FRAME,
               // layout of the frame, and bind the field names
               ATOMICALLY_FRAME_FIELDS(W_,P_,
                                       info_ptr, p1, p2,
                                       code,
                                       next_invariant,
                                       frame_result))
    return (P_ result) // value returned to the frame
{
    P_ checkpoint;
    gcptr trec, outer, next_invariant, q;

    trec = StgTSO_ptrec(CurrentTSO);

    /* We've got no more invariants to check, try to commit */
    ("ptr" checkpoint) = ccall p_stmCommitTransaction(MyCapability() "ptr", trec "ptr");

    if(checkpoint == PASTM_SUCCESS){ //Validation succeeded
        P_ stats;
        W_ stat;
        stats = StgTSO_pastmStats(CurrentTSO);
        stat = StgPASTMStats_numCommits(stats);
        stat = stat + 1;
        StgPASTMStats_numCommits(stats) = stat;

        StgTSO_ptrec(CurrentTSO) = NO_PTREC;
        frame_result = result;
        return(frame_result);
    }
    if(checkpoint == PASTM_FAIL){ //Validation failed and no checkpoint
        P_ stats;
        W_ stat;
        stats = StgTSO_pastmStats(CurrentTSO);
        stat = StgPASTMStats_commitTimeFullAborts(stats);
        stat = stat + 1;
        StgPASTMStats_commitTimeFullAborts(stats) = stat;

        ("ptr" trec) = ccall p_stmStartTransaction(MyCapability() "ptr");
        StgTSO_ptrec(CurrentTSO) = trec;
        next_invariant = END_INVARIANT_CHECK_QUEUE;

        jump stg_ap_v_fast
            // push the StgAtomicallyFrame again: the code generator is
            // clever enough to only assign the fields that have changed.
            (ATOMICALLY_FRAME_FIELDS(,,info_ptr,p1,p2,
                                     code,next_invariant,frame_result))
            (code);
    }else{//Validation failed, but we have a checkpoint

        P_ k;
        P_ val;

        P_ stats;
        W_ stat;
        stats = StgTSO_pastmStats(CurrentTSO);
        stat = StgPASTMStats_commitTimePartialAborts(stats);
        stat = stat + 1;
        StgPASTMStats_commitTimePartialAborts(stats) = stat;


        k = StgPTRecWithK_continuation(checkpoint);
        val = StgPTRecWithK_read_value(checkpoint);

        jump stg_ap_pv_fast  
            // push the StgAtomicallyFrame again: the code generator is
            // clever enough to only assign the fields that have changed.
            (ATOMICALLY_FRAME_FIELDS(,,info_ptr,p1,p2,
                                     code,next_invariant,frame_result))
            (k, val);
    }
}




stg_full_atomicallyzh (P_ stm)
{
    P_ old_trec;
    P_ new_trec;
    P_ code, next_invariant, frame_result;

    // stmStartTransaction may allocate
    MAYBE_GC_P(stg_full_atomicallyzh, stm);

    STK_CHK_GEN();

    old_trec = StgTSO_ptrec(CurrentTSO);

    /* Start the memory transcation */
    (new_trec) = foreign "C" full_stmStartTransaction(MyCapability() "ptr");
    StgTSO_ptrec(CurrentTSO) = new_trec;

    /* Nested transactions are idempotent */ 
    if (old_trec != NO_PTREC) {
        jump stg_ap_v_fast(stm);
    }

    code = stm;
    next_invariant = END_INVARIANT_CHECK_QUEUE;
    frame_result = NO_TREC;

    jump stg_ap_v_fast
        (ATOMICALLY_FRAME_FIELDS(,,stg_full_atomically_frame_info, CCCS, 0,
                                 code,next_invariant,frame_result))
        (stm);
}

stg_fa_eagerFullAbort
{
    W_ frame;
    P_ code; 

    P_ stats;
    W_ stat;
    stats = StgTSO_pastmStats(CurrentTSO);
    stat = StgPASTMStats_eagerFullAborts(stats);
    stat = stat + 1;
    StgPASTMStats_eagerFullAborts(stats) = stat;

    //fully abort -- p_setAtomicallyFrameHelper will unwind the stack to the nearest atomic frame
    //According to StgCmmForeign.hs, SAVE_THREAD_STATE() gets compiled to:
    //tso = CurrentTSO;
    //tso->stackobj->sp = Sp;  --Sp is the register containing the stack pointer
    SAVE_THREAD_STATE();

    //We can use the same C function the partial abort implementation is using
    ccall p_setAtomicallyFrameHelper(MyCapability() "ptr", CurrentTSO "ptr"); 

    /* According to StgCmmForeign.hs:
       tso = CurrentTSO;
       stack = tso->stackobj;
       Sp = stack->sp;
       SpLim = stack->stack + RESERVED_STACK_WORDS;
       HpAlloc = 0;
       --   HpAlloc is assumed to be set to non-zero only by a failed
       --   heap check, see HeapStackCheck.cmm:GC_GENERIC
       p_findAtomicallyFrameHelper will set the tso->stackobj->sp to point to the 
       nearest enclosing atomically frame (there should only be one), so we use
       LOAD_THREAD_STATE() to read the stack pointer out of the TSO and store it in Sp
    */
        
    LOAD_THREAD_STATE();
    frame = Sp;

    //stg_patomically_frame has the same layout as stg_atomically_frame,
    //so just use the macro that they defined for extracting the code
    R1 = StgAtomicallyFrame_code(frame);
    jump stg_ap_v_fast [R1];

}

stg_full_readTVarzh (P_ tvar, P_ k)
{
    P_ trec;
    P_ result;
    W_ header;
    
    // Call to stmReadTVar may allocate
    MAYBE_GC_PP (stg_preadTVarzh, tvar, k);

    trec = StgTSO_ptrec(CurrentTSO);
    ("ptr" result) = ccall fa_stmReadTVar(MyCapability() "ptr", trec "ptr",
                                         tvar "ptr", k "ptr");

    if(result == PASTM_FAIL){
        jump stg_fa_eagerFullAbort []; //full abort
    }
    
    return (result);
}



stg_full_writeTVarzh (P_ tvar,     /* :: TVar a */
                  P_ new_value /* :: a      */)
{
    W_ trec;

    // Call to stmWriteTVar may allocate
    MAYBE_GC_PP (stg_pwriteTVarzh, tvar, new_value);

    trec = StgTSO_ptrec(CurrentTSO);
    ccall p_stmWriteTVar(MyCapability() "ptr", trec "ptr", tvar "ptr",
                         new_value "ptr");
    return ();
}



