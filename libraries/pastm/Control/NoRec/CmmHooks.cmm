#include "Cmm.h"

// This must match StgAtomicallyFrame in Closures.h
#define ATOMICALLY_FRAME_FIELDS(w_,p_,info_ptr,p1,p2,code,next,result)  \
    w_ info_ptr,                                                        \
    PROF_HDR_FIELDS(w_,p1,p2)                                           \
    p_ code,                                                            \
    p_ next,                                                            \
    p_ result


INFO_TABLE_RET(stg_norec_atomically_frame, ATOMICALLY_FRAME,
               // layout of the frame, and bind the field names
               ATOMICALLY_FRAME_FIELDS(W_,P_,
                                       info_ptr, p1, p2,
                                       code,
                                       next_invariant,
                                       frame_result))
    return (P_ result) // value returned to the frame
{
    P_ res;
    gcptr trec, outer, next_invariant, q;

    trec = StgTSO_ptrec(CurrentTSO);

    /* We've got no more invariants to check, try to commit */
    ("ptr" res) = ccall norec_stmCommitTransaction(MyCapability() "ptr", trec "ptr");

    if(res == PASTM_SUCCESS){ //Validation succeeded
        frame_result = result;
        return(frame_result);
    }
    if(res == PASTM_FAIL){ //Validation failed 
        ("ptr" trec) = ccall norec_stmStartTransaction(MyCapability() "ptr", trec "ptr");
        StgTSO_ptrec(CurrentTSO) = trec;
        next_invariant = END_INVARIANT_CHECK_QUEUE;

        jump stg_ap_v_fast
            (ATOMICALLY_FRAME_FIELDS(,,info_ptr,p1,p2,
                                     code,next_invariant,frame_result))
            (code);
    }
}

stg_norec_atomicallyzh (P_ stm)
{
    P_ old_trec;
    P_ new_trec;
    P_ code, next_invariant, frame_result;

    MAYBE_GC_P(stg_norec_atomicallyzh, stm);

    STK_CHK_GEN();

    old_trec = StgTSO_ptrec(CurrentTSO);

    ("ptr" new_trec) = ccall norec_stmStartTransaction(MyCapability() "ptr", old_trec "ptr");
    StgTSO_ptrec(CurrentTSO) = new_trec;

    code = stm;
    next_invariant = END_INVARIANT_CHECK_QUEUE;
    frame_result = NO_TREC;

    jump stg_ap_v_fast
        (ATOMICALLY_FRAME_FIELDS(,,stg_norec_atomically_frame_info, CCCS, 0,
                                 code,next_invariant,frame_result))
        (stm);
}

stg_norec_eagerFullAbort
{
    W_ frame;
    P_ code; 

    SAVE_THREAD_STATE();

    //We can use the same C function the partial abort implementation is using
    ccall p_setAtomicallyFrameHelper(MyCapability() "ptr", CurrentTSO "ptr"); 

    LOAD_THREAD_STATE();
    frame = Sp;

    R1 = StgAtomicallyFrame_code(frame);
    jump stg_ap_v_fast [R1];

}

stg_norec_readTVarzh (P_ tvar)
{
    P_ trec;
    P_ result;
    W_ header;
    
    MAYBE_GC_P (stg_norec_readTVarzh, tvar);

    trec = StgTSO_ptrec(CurrentTSO);
    ("ptr" result) = ccall norec_stmReadTVar(MyCapability() "ptr", trec "ptr",
                                         tvar "ptr");

    if(result == PASTM_FAIL){
        jump stg_norec_eagerFullAbort []; //full abort
    }
    
    return (result);
}



stg_norec_writeTVarzh (P_ tvar,     /* :: TVar a */
					  P_ new_value /* :: a      */)
{
    W_ trec;

    MAYBE_GC_PP (stg_norec_writeTVarzh, tvar, new_value);

    trec = StgTSO_ptrec(CurrentTSO);
    ccall norec_stmWriteTVar(MyCapability() "ptr", trec "ptr", tvar "ptr",
			  new_value "ptr");
    return (tvar);
}



